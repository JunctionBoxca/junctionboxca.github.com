---
title:      Simplified TDD with Sinatra autotest
created_at: 2010-04-17 12:00:00 +00:00
layout:     post
---
General overview of what we're building;

* Simple autotest compatible directory structure.
* Sinatra application.
* Sinatra unit test.

File setup:

{% highlight bash %}

export project=MyApp
mkdir -p $project/{lib,test}
cd $project
cat <<EOT > test/test_app.rb
$:.unshift File.join(File.dirname(__FILE__),'..','lib')

require 'app'
require 'test/unit'

class AppTest < Test::Unit::TestCase
  def test_fail
    flunk 'Write your App tests!'
  end
end
EOT

autotest

{% endhighlight %}

p. This should output something akin to the following, if you don't get that then somethings amiss that you'll need to investigate further.

{% highlight ruby %}

/Library/Ruby/Site/1.8/rubygems/custom_require.rb:31:in `gem_original_require': no such file to load -- app (LoadError)
	from /Library/Ruby/Site/1.8/rubygems/custom_require.rb:31:in `require'
	from ./test/test_app.rb:4
	from /Library/Ruby/Site/1.8/rubygems/custom_require.rb:31:in `gem_original_require'
	from /Library/Ruby/Site/1.8/rubygems/custom_require.rb:31:in `require'
	from -e:2
	from -e:2:in `each'
	from -e:2

{% endhighlight %}

Next create a new file named 'lib/app.rb'.

{% highlight bash %}

touch lib/app.rb

{% endhighlight %}

Once saved your test should kick to life with one failure:

{% highlight ruby %}

1) Failure:
test_fail(AppTest) [./test/test_app.rb:8]:
Write your App tests!.

{% endhighlight %}

Hugely simplified test suite, but it gets you going and doesn't contain reams of mystical cruft to debug.

Next up is introducing rack's test suite, modify your test_app.rb to look like the following;


{% highlight ruby %}

$:.unshift File.join(File.dirname(__FILE__),'..','lib')

require 'app'
require 'test/unit'
require 'rack/test'

set :environment, :test

class AppTest < Test::Unit::TestCase
  include Rack::Test::Methods

  def app
    App
  end
  
  def test_fail
    flunk 'Write your App tests!'
  end
end

{% endhighlight %}

Back to a test that doesn't run? Good!

Let's get it back to a running test with the following change to 'lib/app.rb':

{% highlight ruby %}

%w{rubygems sinatra}.each {|l| require l }

{% endhighlight %}

Now you should have a failing test.  Lets start on something meaningful remove the test_fail method and add the following:

{% highlight ruby %}

def test_root_is_accessible
  get '/'
  assert last_response.ok?
end

{% endhighlight %}

Your autotest should switch to the error output below:

{% highlight ruby %}

1) Error:
test_root_is_accessible(AppTest):
NameError: uninitialized constant AppTest::App
./test/test_app.rb:13:in `app'

{% endhighlight %}

That's an indicator we're missing our application class.  Dealing with one problem at a time lets implement the skeleton class in 'lib/app.rb' as outlined below.

{% highlight ruby %}

class App < Sinatra::Base
end

{% endhighlight %}

You should get a failing test case with the output below, which indicates the route is not found.

{% highlight ruby %}

1) Failure:
test_root_is_accessible(AppTest) [./test/test_app.rb:18]:
<false> is not true.

{% endhighlight %}

Next up lets add the route in 'lib/app.rb'.

{% highlight ruby %}

get '/' do
end

{% endhighlight %}

And there we go our first of hopefully many tests is now passing, congratulations!

For the source see;

"git://github.com/nfisher/Sinatra-Skeleton.git":git://github.com/nfisher/Sinatra-Skeleton.git

